{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/Marvel_quizz/src/containers/Welcome/Quiz/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport Levels from './Levels';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport ProgressBar from './ProgressBar';\nimport { QuizMarvel } from './quizMarvel';\nimport QuizOver from './QuizOver';\ntoast.configure();\nconst initialState = {\n  quizLevel: 0,\n  maxQuestions: 10,\n  storedQuestions: [],\n  question: null,\n  options: [],\n  idQuestion: 0,\n  btnDisabled: true,\n  userAnswer: null,\n  score: 0,\n  showWelcomeMsg: false,\n  quizEnd: false,\n  percent: null\n};\nconst levelNames = [\"debutant\", \"confirme\", \"expert\"];\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestions = quizz => {\n      const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n\n      if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n        this.storedDataRef.current = fetchedArrayQuiz;\n        const newArray = fetchedArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestions: newArray\n        });\n      }\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestions - 1) {\n        this.setState({\n          quizEnd: true\n        });\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n\n      if (this.state.userAnswer === goodAnswer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n        toast.success('Bravo +1', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error('RatÃ© 0', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.submitAnswer = selectedAnswer => {\n      this.setState({\n        userAnswer: selectedAnswer,\n        btnDisabled: false\n      });\n    };\n\n    this.getPercentage = (maxQuest, ourScore) => ourScore / maxQuest * 100;\n\n    this.gameOver = percent => {\n      if (percent >= 50) {\n        this.setState({\n          quizLevel: this.state.quizLevel + 1,\n          percent\n        });\n      } else {\n        this.setState({\n          percent\n        });\n      }\n    };\n\n    this.loadLevelQuestions = param => {\n      this.setState({ ...initialState,\n        quizLevel: param\n      });\n      this.loadQuestions(levelNames[param]);\n    };\n\n    this.state = initialState;\n    this.storedDataRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadQuestions(levelNames[this.state.quizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      maxQuestions,\n      storedQuestions,\n      idQuestion,\n      quizEnd,\n      score\n    } = this.state;\n\n    if (storedQuestions !== prevState.storedQuestions && storedQuestions.length) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options\n      });\n    }\n\n    if (idQuestion !== prevState.idQuestion && storedQuestions.length) {\n      this.setState({\n        question: storedQuestions[idQuestion].question,\n        options: storedQuestions[idQuestion].options,\n        userAnswer: null,\n        btnDisabled: true\n      });\n    }\n\n    if (quizEnd !== prevState.quizEnd) {\n      const gradepercent = this.getPercentage(maxQuestions, score);\n      this.gameOver(gradepercent);\n    }\n  }\n\n  render() {\n    const {\n      quizLevel,\n      maxQuestions,\n      question,\n      options,\n      idQuestion,\n      btnDisabled,\n      userAnswer,\n      score,\n      quizEnd,\n      percent\n    } = this.state;\n    const displayOptions = options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        className: `answerOptions ${userAnswer === option ? \"selected\" : null}`,\n        onClick: () => this.submitAnswer(option),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }, option);\n    });\n    return quizEnd ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedDataRef,\n      levelNames: levelNames,\n      score: score,\n      maxQuestions: maxQuestions,\n      quizLevel: quizLevel,\n      percent: percent,\n      loadLevelQuestions: this.loadLevelQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      levelNames: levelNames,\n      quizLevel: quizLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: idQuestion,\n      maxQuestions: maxQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, question), displayOptions, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: btnDisabled,\n      className: \"btnSubmit\",\n      onClick: this.nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/miclaude/Desktop/Marvel_quizz/src/containers/Welcome/Quiz/index.js"],"names":["React","Component","Fragment","Levels","toast","ProgressBar","QuizMarvel","QuizOver","configure","initialState","quizLevel","maxQuestions","storedQuestions","question","options","idQuestion","btnDisabled","userAnswer","score","showWelcomeMsg","quizEnd","percent","levelNames","Quiz","constructor","props","loadQuestions","quizz","fetchedArrayQuiz","length","state","storedDataRef","current","newArray","map","answer","keepRest","setState","nextQuestion","prevState","goodAnswer","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","error","submitAnswer","selectedAnswer","getPercentage","maxQuest","ourScore","gameOver","loadLevelQuestions","param","createRef","componentDidMount","componentDidUpdate","prevProps","gradepercent","render","displayOptions","option","index"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Levels from './Levels';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css' \nimport ProgressBar from './ProgressBar';\nimport { QuizMarvel } from './quizMarvel';\nimport QuizOver from './QuizOver';\n\ntoast.configure();\n\nconst initialState = {\n    quizLevel: 0,\n    maxQuestions: 10,\n    storedQuestions: [],\n    question: null,\n    options: [],\n    idQuestion: 0,\n    btnDisabled: true,\n    userAnswer: null,\n    score: 0,\n    showWelcomeMsg: false,\n    quizEnd: false,\n    percent: null\n}\n\nconst levelNames = [\"debutant\", \"confirme\", \"expert\"];\n\nclass Quiz extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = initialState;\n        this.storedDataRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.loadQuestions(levelNames[this.state.quizLevel])\n    }\n\n    loadQuestions = quizz => {\n        const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\n        if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\n\n            this.storedDataRef.current = fetchedArrayQuiz;\n\n            const newArray = fetchedArrayQuiz.map( ({ answer, ...keepRest}) => keepRest);\n\n            this.setState({ storedQuestions: newArray })\n\n        }\n    }\n\n    nextQuestion = () => {\n        if (this.state.idQuestion === this.state.maxQuestions - 1) {\n\n            this.setState({quizEnd: true })\n\n        } else {\n\n            this.setState(prevState => ({ idQuestion: prevState.idQuestion + 1 }))\n        }\n\n        const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\n        if (this.state.userAnswer === goodAnswer) {\n            \n            this.setState( prevState => ({ score: prevState.score + 1 }))\n\n            toast.success('Bravo +1', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\"\n            });\n        } else {\n            toast.error('RatÃ© 0', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\"\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {\n            maxQuestions,\n            storedQuestions,\n            idQuestion,\n            quizEnd,\n            score\n        } = this.state;\n\n        if ((storedQuestions !== prevState.storedQuestions) && storedQuestions.length) {\n            \n            this.setState({\n                question: storedQuestions[idQuestion].question,\n                options: storedQuestions[idQuestion].options\n            })\n            \n        }\n\n        if ((idQuestion !== prevState.idQuestion) && storedQuestions.length) {\n            this.setState({\n                question: storedQuestions[idQuestion].question,\n                options: storedQuestions[idQuestion].options,\n                userAnswer: null,\n                btnDisabled: true\n            })\n        }\n\n        if ( quizEnd !== prevState.quizEnd ) {\n            const gradepercent = this.getPercentage(maxQuestions, score);\n            this.gameOver(gradepercent);\n        }\n\n    }\n    \n    submitAnswer = selectedAnswer => {\n        this.setState({\n            userAnswer: selectedAnswer,\n            btnDisabled: false\n        })\n    }\n\n    getPercentage = (maxQuest, ourScore) => (ourScore / maxQuest) * 100;\n\n    gameOver = percent => {\n\n        if (percent >= 50) {\n            this.setState({\n                quizLevel: this.state.quizLevel + 1,\n                percent\n            })\n        } else {\n            this.setState({percent})\n        }\n    }\n\n    loadLevelQuestions = param => {\n        this.setState({...initialState, quizLevel: param})\n\n        this.loadQuestions(levelNames[param]);\n    }\n\n    render() {\n\n    const {\n        quizLevel,\n        maxQuestions,\n        question,\n        options,\n        idQuestion,\n        btnDisabled,\n        userAnswer,\n        score,\n        quizEnd,\n        percent\n    } = this.state;\n\n        const displayOptions = options.map((option, index) => {\n            return (\n                <p key={index} \n                   className={`answerOptions ${userAnswer === option ? \"selected\" : null}`}\n                   onClick={() => this.submitAnswer(option)}\n                >\n                   {option}\n                </p>\n            )\n        })\n\n        return quizEnd ? (\n            <QuizOver \n                ref={this.storedDataRef}\n                levelNames={levelNames}\n                score={score}\n                maxQuestions={maxQuestions}\n                quizLevel={quizLevel}\n                percent={percent}\n                loadLevelQuestions={this.loadLevelQuestions}\n            />\n        )\n        :\n        (\n            <Fragment>\n                <Levels \n                   levelNames={levelNames}\n                   quizLevel={quizLevel}\n                />\n\n                <ProgressBar \n                   idQuestion={idQuestion} \n                   maxQuestions={maxQuestions}\n                />\n                <h2>{question}</h2>\n                \n                { displayOptions }\n\n                <button \n                   disabled={btnDisabled} \n                   className=\"btnSubmit\"\n                   onClick={this.nextQuestion}\n                >\n                {idQuestion < maxQuestions - 1 ? \"Suivant\" : \"Terminer\"}\n                </button>\n            </Fragment>\n        )\n\n    }\n}\n\nexport default Quiz"]},"metadata":{},"sourceType":"module"}