{"ast":null,"code":"var _jsxFileName = \"/Users/miclaude/Desktop/Marvel_quizz/src/containers/Welcome/Quiz/QuizOver/index.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { GiTrophyCup } from 'react-icons/gi';\nimport Loader from '../../../../components/Loader';\nimport Modal from './Modal';\nimport axios from 'axios';\nconst QuizOver = React.forwardRef((props, ref) => {\n  const {\n    levelNames,\n    score,\n    maxQuestions,\n    quizLevel,\n    percent,\n    loadLevelQuestions\n  } = props;\n  const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY;\n  const hash = 'c15fe769e9cfc9b7538d3326c78bb9bd';\n  const [reponseQuestion, setReponseQuestion] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [characterInfos, setCharacterInfos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setReponseQuestion(ref.current);\n  }, [ref]);\n\n  const showModal = id => {\n    setOpenModal(true);\n    axios.get(`https://gateway.marvel.com/v1/public/characters/${id}?ts=1&apikey=${API_PUBLIC_KEY}&hash=${hash}`).then(response => {\n      setCharacterInfos(response.data);\n      setLoading(false);\n    }).catch(err => {});\n  };\n\n  const hideModal = () => {\n    setOpenModal(false);\n    setLoading(true);\n  };\n\n  const capitalizeFirestletter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  const averageGrade = maxQuestions / 2;\n\n  if (score < averageGrade) {\n    setTimeout(() => loadLevelQuestions(quizLevel), 3000);\n  }\n\n  const decision = score >= averageGrade ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, quizLevel < levelNames.length ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \"Bravo, passez au niveau suivant!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult success\",\n    onClick: () => loadLevelQuestions(quizLevel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, \"Niveau Suivant\")) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(GiTrophyCup, {\n    size: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }), \" Bravo, vous \\xEAtes un expert !\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult gameOver\",\n    onClick: () => loadLevelQuestions(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Accueil\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"R\\xE9ussite: \", percent, \" %\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Note: \", score, \"/\", maxQuestions))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"failureMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Vous avez \\xE9chou\\xE9 !\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"R\\xE9ussite: \", percent, \" %\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Note: \", score, \"/\", maxQuestions)));\n  const questionAnswer = score >= averageGrade ? reponseQuestion.map(question => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: question.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, question.question), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, question.answer), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btnInfo\",\n      onClick: () => showModal(question.heroId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, \"Infos\")));\n  }) : /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    colSpan: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    loadingMsg: \"pas de r√©ponses!\",\n    styling: {\n      textAlign: 'center',\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  })));\n  const resultInModal = !loading ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, characterInfos.data.results[0].name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comicImage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: characterInfos.data.results[0].thumbnail.path + '.' + characterInfos.data.results[0].thumbnail.extension,\n    alt: characterInfos.data.results[0].name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, characterInfos.attributionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comicDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"Description\"), characterInfos.data.results[0].description ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }, characterInfos.data.results[0].description) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 27\n    }\n  }, \"Description indisponible ...\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, \"Plus d'infos\"), characterInfos.data.results[0].urls && characterInfos.data.results[0].urls.map((url, index) => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      key: index,\n      href: url.url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 36\n      }\n    }, capitalizeFirestletter(url.type));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalFooter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"modalBtn\",\n    onClick: hideModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Fermer\"))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, \"R\\xE9ponse de Marvel ...\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  })));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, decision, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"Les r\\xE9ponses aux questions pos\\xE9es:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"answers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 29\n    }\n  }, \"Question\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 29\n    }\n  }, \"R\\xE9ponses\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 29\n    }\n  }, \"Infos\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, questionAnswer))), /*#__PURE__*/React.createElement(Modal, {\n    showModal: openModal,\n    hideModal: hideModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, resultInModal));\n});\nexport default React.memo(QuizOver);","map":{"version":3,"sources":["/Users/miclaude/Desktop/Marvel_quizz/src/containers/Welcome/Quiz/QuizOver/index.js"],"names":["React","Fragment","useEffect","useState","GiTrophyCup","Loader","Modal","axios","QuizOver","forwardRef","props","ref","levelNames","score","maxQuestions","quizLevel","percent","loadLevelQuestions","API_PUBLIC_KEY","process","env","REACT_APP_MARVEL_API_KEY","hash","reponseQuestion","setReponseQuestion","openModal","setOpenModal","characterInfos","setCharacterInfos","loading","setLoading","current","showModal","id","get","then","response","data","catch","err","hideModal","capitalizeFirestletter","string","charAt","toUpperCase","slice","averageGrade","setTimeout","decision","length","questionAnswer","map","question","answer","heroId","textAlign","color","resultInModal","results","name","thumbnail","path","extension","attributionText","description","urls","url","index","type","memo"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\nimport { GiTrophyCup } from 'react-icons/gi';\nimport Loader from '../../../../components/Loader'\nimport Modal from './Modal'\nimport axios from 'axios'\n\nconst QuizOver = React.forwardRef((props, ref) => {\n\n    const {\n        levelNames, \n        score, \n        maxQuestions, \n        quizLevel, \n        percent,\n        loadLevelQuestions\n    } = props;\n\n    const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY\n    const hash = 'c15fe769e9cfc9b7538d3326c78bb9bd'\n\n    const [reponseQuestion, setReponseQuestion] = useState([]);\n    const [openModal, setOpenModal] = useState(false);\n    const [characterInfos, setCharacterInfos] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setReponseQuestion(ref.current)\n    }, [ref])\n\n    const showModal = id => {\n        setOpenModal(true);\n\n        axios.get(`https://gateway.marvel.com/v1/public/characters/${id}?ts=1&apikey=${API_PUBLIC_KEY}&hash=${hash}`)\n        .then( response => {\n            setCharacterInfos(response.data);\n            setLoading(false);\n        })\n        .catch(err => {\n            \n        })\n    }\n\n    const hideModal = () => {\n        setOpenModal(false);\n        setLoading(true);\n    }\n\n    const capitalizeFirestletter = string => {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    const averageGrade = maxQuestions / 2;\n\n    if (score < averageGrade) {\n        setTimeout(() => loadLevelQuestions(quizLevel), 3000);\n    }\n\n    const decision = score >= averageGrade ? (\n        <Fragment>\n            <div className=\"stepsBtnContainer\">\n            {\n                quizLevel < levelNames.length ? \n                (\n                    <Fragment>\n                        <p className=\"successMsg\">Bravo, passez au niveau suivant!</p>\n                        <button \n                            className=\"btnResult success\"\n                            onClick={() => loadLevelQuestions(quizLevel)}\n                            >\n                            Niveau Suivant\n                        </button>\n                    </Fragment>\n                )\n                :\n                (\n                    <Fragment>\n                        <p className=\"successMsg\">\n                        <GiTrophyCup size='50px' /> Bravo, vous √™tes un expert !\n                        </p>\n                        <button \n                            className=\"btnResult gameOver\"\n                            onClick={() => loadLevelQuestions(0)}\n                            >\n                            Accueil\n                        </button>\n                    </Fragment>\n                )\n            }\n            </div>\n            <div className=\"percentage\">\n                <div className=\"progressPercent\">R√©ussite: {percent} %</div>\n                <div className=\"progressPercent\">Note: {score}/{maxQuestions}</div>\n            </div>\n        </Fragment>\n    )\n    :\n    (\n        <Fragment>\n            <div className=\"stepsBtnContainer\">\n                <p className=\"failureMsg\">Vous avez √©chou√© !</p>\n            </div>\n\n            <div className=\"percentage\">\n                <div className=\"progressPercent\">R√©ussite: {percent} %</div>\n                <div className=\"progressPercent\">Note: {score}/{maxQuestions}</div>\n            </div>\n        </Fragment>\n    )\n\n    const questionAnswer = score >= averageGrade ? (\n        reponseQuestion.map( question => {\n            return (\n                <tr key={question.id}>\n                    <td>{question.question}</td>\n                    <td>{question.answer}</td>\n                    <td>\n                        <button \n                           className=\"btnInfo\"\n                           onClick={ () => showModal(question.heroId)}\n                        >\n                        Infos\n                        </button>\n                    </td>\n                </tr>\n            )\n        })\n    )\n    :\n    (\n        <tr>\n            <td colSpan=\"3\">\n                <Loader \n                    loadingMsg={\"pas de r√©ponses!\"}\n                    styling={{textAlign: 'center', color: 'red'}}\n                />\n            </td>\n        </tr>\n    )\n\n    const resultInModal = !loading ? \n    (\n        <Fragment>\n            <div className=\"modalHeader\">\n                <h2>{characterInfos.data.results[0].name}</h2>\n            </div>\n            <div className=\"modalBody\">\n               <div className=\"comicImage\">\n                    <img \n                        src={characterInfos.data.results[0].thumbnail.path+'.'+characterInfos.data.results[0].thumbnail.extension} \n                        alt={characterInfos.data.results[0].name}\n                    />\n\n                    <p>{characterInfos.attributionText}</p>\n               </div>\n               <div className=\"comicDetails\">\n                    <h3>Description</h3>\n                    {\n                        characterInfos.data.results[0].description ?\n                        <p>{characterInfos.data.results[0].description}</p>\n                        : <p>Description indisponible ...</p>\n                    }\n                    <h3>Plus d'infos</h3>\n                    {\n                        characterInfos.data.results[0].urls && \n                        characterInfos.data.results[0].urls.map( (url, index) => {\n                            return <a \n                                key={index}\n                                href={url.url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                              {capitalizeFirestletter(url.type)}\n                            </a>\n                        })\n                    }\n               </div>\n            </div>\n            <div className=\"modalFooter\">\n                <button className=\"modalBtn\" onClick={hideModal}>Fermer</button>\n            </div>\n        </Fragment>\n    )\n    :\n    (\n        <Fragment>\n            <div className=\"modalHeader\">\n                <h2>R√©ponse de Marvel ...</h2>\n            </div>\n            <div className=\"modalBody\">\n                <Loader />\n            </div>\n        </Fragment>\n    )\n\n    return (\n        <>\n            \n            { decision }\n\n            <hr />\n            <p>Les r√©ponses aux questions pos√©es:</p>\n\n            <div className=\"answerContainer\">\n                <table className=\"answers\">\n                    <thead>\n                        <tr>\n                            <th>Question</th>\n                            <th>R√©ponses</th>\n                            <th>Infos</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {questionAnswer}\n                    </tbody>\n                </table>\n            </div>\n\n            <Modal showModal={openModal} hideModal={hideModal}>\n                { resultInModal }\n            </Modal>\n\n        </>\n    )\n})\n\nexport default React.memo(QuizOver)"]},"metadata":{},"sourceType":"module"}